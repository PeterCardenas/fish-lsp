Thu Dec 29 04:41:30 AM CST 2022

[FishLsp.onDidOpenTextDocument()]
{
  "params": {
    "textDocument": {
      "uri": "file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish",
      "languageId": "fish",
      "version": 1,
      "text": "set variable_name \"value\" \n\nfunction test-fish-lsp --argument-names file --description \"Check a file for syntax errors\"\n    echo \"$file\"\n    lso\n    fzf-local-node_modules\n    __test_small\nend\n\n\n## this is a comment\nfunction __test_small \n    if string match --regex '^(\\w{10}).fish' -- \"$argv\"\n        echo \"matched\" | string pad -c ' ' \n    end\n    string match --regex '[[:alnum:]]' \"$argv\"\n\n    # padding a stirng\n    string pad --char \" \" $argv \n\n    set_color --background black white \n    set -l variable_name \"v\" \n    whatis -? --config-file --help --regex \"*\" \n\n    set -l variable_name (string split0 --fields 1 --right --max 4 '\\t' \"$argv\")\n    \n    string pad --width 10 --char \" \" \"$argv\" \n\n    set -l variable_name \"value\" \n\n\n    if test -n \"$variable_name\" \n        echo \"variable_name is not empty\" \n    end\n\n    for i in (seq 1 (count $variable_name))\n    end\n\n    for i in $variable_name\n        echo $i\n    end\n    set variable_name \"value\" \nend\n\nset variable_name \"value\" \n\n"
    }
  }
}
[FishLsp.onDidOpenTextDocument()] uri: /home/ndonfris/.config/fish/functions/test-fish-lsp.fish
opened document: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
analyzed document: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
onDocumentSymbols
length: 18
onDefinition
variable_name
scopes: 1
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onReference
set variable_name "value" 

function test-fish-lsp --argument-names file --description "Check a file for syntax errors"
    echo "$file"
    lso
    fzf-local-node_modules
    __test_small
end


## this is a comment
function __test_small 
    if string match --regex '^(\w{10}).fish' -- "$argv"
        echo "matched" | string pad -c ' ' 
    end
    string match --regex '[[:alnum:]]' "$argv"

    # padding a stirng
    string pad --char " " $argv 

    set_color --background black white 
    set -l variable_name "v" 
    whatis -? --config-file --help --regex "*" 

    set -l variable_name (string split0 --fields 1 --right --max 4 '\t' "$argv")
    
    string pad --width 10 --char " " "$argv" 

    set -l variable_name "value" 


    if test -n "$variable_name" 
        echo "variable_name is not empty" 
    end

    for i in (seq 1 (count $variable_name))
    end

    for i in $variable_name
        echo $i
    end
    set variable_name "value" 
end

set variable_name "value" 


no NODE in onRefrence
[onDidCloseTextDocument]: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
closed uri: /home/ndonfris/.config/fish/functions/test-fish-lsp.fish
[FishLsp.onDidOpenTextDocument()]
{
  "params": {
    "textDocument": {
      "uri": "file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish",
      "languageId": "fish",
      "version": 1,
      "text": "set variable_name \"value\" \n\nfunction test-fish-lsp --argument-names file --description \"Check a file for syntax errors\"\n    echo \"$file\"\n    lso\n    fzf-local-node_modules\n    __test_small\nend\n\n\n## this is a comment\nfunction __test_small \n    if string match --regex '^(\\w{10}).fish' -- \"$argv\"\n        echo \"matched\" | string pad -c ' ' \n    end\n    string match --regex '[[:alnum:]]' \"$argv\"\n\n    # padding a stirng\n    string pad --char \" \" $argv \n\n    set_color --background black white \n    set -l variable_name \"v\" \n    whatis -? --config-file --help --regex \"*\" \n\n    set -l variable_name (string split0 --fields 1 --right --max 4 '\\t' \"$argv\")\n    \n    string pad --width 10 --char \" \" \"$argv\" \n\n    set -l variable_name \"value\" \n\n\n    if test -n \"$variable_name\" \n        echo \"variable_name is not empty\" \n    end\n\n    for i in (seq 1 (count $variable_name))\n    end\n\n    for i in $variable_name\n        echo $i\n    end\n    set variable_name \"value\" \nend\n\nset variable_name \"value\" \n\n"
    }
  }
}
[FishLsp.onDidOpenTextDocument()] uri: /home/ndonfris/.config/fish/functions/test-fish-lsp.fish
opened document: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
analyzed document: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
onReference
set variable_name "value" 

function test-fish-lsp --argument-names file --description "Check a file for syntax errors"
    echo "$file"
    lso
    fzf-local-node_modules
    __test_small
end


## this is a comment
function __test_small 
    if string match --regex '^(\w{10}).fish' -- "$argv"
        echo "matched" | string pad -c ' ' 
    end
    string match --regex '[[:alnum:]]' "$argv"

    # padding a stirng
    string pad --char " " $argv 

    set_color --background black white 
    set -l variable_name "v" 
    whatis -? --config-file --help --regex "*" 

    set -l variable_name (string split0 --fields 1 --right --max 4 '\t' "$argv")
    
    string pad --width 10 --char " " "$argv" 

    set -l variable_name "value" 


    if test -n "$variable_name" 
        echo "variable_name is not empty" 
    end

    for i in (seq 1 (count $variable_name))
    end

    for i in $variable_name
        echo $i
    end
    set variable_name "value" 
end

set variable_name "value" 


variable_name
onDocumentSymbols
length: 18
[onDidCloseTextDocument]: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
closed uri: /home/ndonfris/.config/fish/functions/test-fish-lsp.fish
[FishLsp.onDidOpenTextDocument()]
{
  "params": {
    "textDocument": {
      "uri": "file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish",
      "languageId": "fish",
      "version": 1,
      "text": "set variable_name \"value\" \n\nfunction test-fish-lsp --argument-names file --description \"Check a file for syntax errors\"\n    echo \"$file\"\n    lso\n    fzf-local-node_modules\n    __test_small\nend\n\n\n## this is a comment\nfunction __test_small \n    if string match --regex '^(\\w{10}).fish' -- \"$argv\"\n        echo \"matched\" | string pad -c ' ' \n    end\n    string match --regex '[[:alnum:]]' \"$argv\"\n\n    # padding a stirng\n    string pad --char \" \" $argv \n\n    set_color --background black white \n    set -l variable_name \"v\" \n    whatis -? --config-file --help --regex \"*\" \n\n    set -l variable_name (string split0 --fields 1 --right --max 4 '\\t' \"$argv\")\n    \n    string pad --width 10 --char \" \" \"$argv\" \n\n    set -l variable_name \"value\" \n\n\n    if test -n \"$variable_name\" \n        echo \"variable_name is not empty\" \n    end\n\n    for i in (seq 1 (count $variable_name))\n    end\n\n    for i in $variable_name\n        echo $i\n    end\n    set variable_name \"value\" \nend\n\nset variable_name \"value\" \n\n"
    }
  }
}
[FishLsp.onDidOpenTextDocument()] uri: /home/ndonfris/.config/fish/functions/test-fish-lsp.fish
opened document: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
analyzed document: file:///home/ndonfris/.config/fish/functions/test-fish-lsp.fish
onReference
set variable_name "value" 

function test-fish-lsp --argument-names file --description "Check a file for syntax errors"
    echo "$file"
    lso
    fzf-local-node_modules
    __test_small
end


## this is a comment
function __test_small 
    if string match --regex '^(\w{10}).fish' -- "$argv"
        echo "matched" | string pad -c ' ' 
    end
    string match --regex '[[:alnum:]]' "$argv"

    # padding a stirng
    string pad --char " " $argv 

    set_color --background black white 
    set -l variable_name "v" 
    whatis -? --config-file --help --regex "*" 

    set -l variable_name (string split0 --fields 1 --right --max 4 '\t' "$argv")
    
    string pad --width 10 --char " " "$argv" 

    set -l variable_name "value" 


    if test -n "$variable_name" 
        echo "variable_name is not empty" 
    end

    for i in (seq 1 (count $variable_name))
    end

    for i in $variable_name
        echo $i
    end
    set variable_name "value" 
end

set variable_name "value" 


variable_name
onDocumentSymbols
length: 18
onReference
set variable_name "value" 

function test-fish-lsp --argument-names file --description "Check a file for syntax errors"
    echo "$file"
    lso
    fzf-local-node_modules
    __test_small
end


## this is a comment
function __test_small 
    if string match --regex '^(\w{10}).fish' -- "$argv"
        echo "matched" | string pad -c ' ' 
    end
    string match --regex '[[:alnum:]]' "$argv"

    # padding a stirng
    string pad --char " " $argv 

    set_color --background black white 
    set -l variable_name "v" 
    whatis -? --config-file --help --regex "*" 

    set -l variable_name (string split0 --fields 1 --right --max 4 '\t' "$argv")
    
    string pad --width 10 --char " " "$argv" 

    set -l variable_name "value" 


    if test -n "$variable_name" 
        echo "variable_name is not empty" 
    end

    for i in (seq 1 (count $variable_name))
    end

    for i in $variable_name
        echo $i
    end
    set variable_name "value" 
end

set variable_name "value" 


variable_name
onReference
set variable_name "value" 

function test-fish-lsp --argument-names file --description "Check a file for syntax errors"
    echo "$file"
    lso
    fzf-local-node_modules
    __test_small
end


## this is a comment
function __test_small 
    if string match --regex '^(\w{10}).fish' -- "$argv"
        echo "matched" | string pad -c ' ' 
    end
    string match --regex '[[:alnum:]]' "$argv"

    # padding a stirng
    string pad --char " " $argv 

    set_color --background black white 
    set -l variable_name "v" 
    whatis -? --config-file --help --regex "*" 

    set -l variable_name (string split0 --fields 1 --right --max 4 '\t' "$argv")
    
    string pad --width 10 --char " " "$argv" 

    set -l variable_name "value" 


    if test -n "$variable_name" 
        echo "variable_name is not empty" 
    end

    for i in (seq 1 (count $variable_name))
    end

    for i in $variable_name
        echo $i
    end
    set variable_name "value" 
end

set variable_name "value" 


i
onDefinition
i
scopes: 2
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onDefinition
variable_name
scopes: 2
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onDefinition
file
scopes: 1
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onDefinition
argv
scopes: 2
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onDefinition
variable_name
scopes: 0
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onDefinition
variable_name
scopes: 1
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}
onDefinition
variable_name
scopes: 1
{
	name: variable_name
	kind: Variable
	start: (44, 0)
	end: (44, 25)
	selectionStart: (44, 4)
	selectionEnd: (44, 17)
	children: 0
}
{
	name: __test_small
	kind: Function
	start: (11, 0)
	end: (42, 3)
	selectionStart: (11, 9)
	selectionEnd: (11, 21)
	children: 6
}
{
	name: test-fish-lsp
	kind: Function
	start: (2, 0)
	end: (7, 3)
	selectionStart: (2, 9)
	selectionEnd: (2, 22)
	children: 1
}
{
	name: variable_name
	kind: Variable
	start: (0, 0)
	end: (0, 25)
	selectionStart: (0, 4)
	selectionEnd: (0, 17)
	children: 0
}